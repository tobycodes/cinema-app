version: 2.1
orbs:
  slack: circleci/slack@4.4.2
executors:
  app-executor:
    docker:
      - image: circleci/node:16.13.0
    working_directory: ~/repo
  slack-executor:
    docker:
      - image: 'cimg/base:stable'
    resource_class: small
  docker-publisher:
    environment:
      IMAGE_NAME: tobyscript/cinema-app
    docker:
      - image: circleci/buildpack-deps:stretch
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
  - &install-dependencies
    run:
      name: Install dependencies
      command: |
        mkdir -p artifacts
        npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: Install AWS CLI
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
        sudo apt-get install -y python3-pip python-dev build-essential
  - &build-project
    run:
      name: Build project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r *.[^.]*
        echo "Build successful"
  - &notify-pass-on-slack
    slack/notify:
      event: pass
      channel: 'cinema-app-circleci'
      template: 'basic_success_1'
  - &notify-fail-on-slack
    slack/notify:
      event: fail
      channel: 'cinema-app-circleci'
      template: 'basic_fail_1'
  - &persist-to-workspace
    persist_to_workspace:
      root: ./
      paths:
        - artifacts

jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependencies
      - *save-cache
      - *notify-fail-on-slack
      - run:
          name: Copy Deploy Folder
          command: cp -r deploy artifacts/deploy
      - *persist-to-workspace

  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run linting
          command: npm run lint
      - *notify-fail-on-slack

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier check
          command: npm run prettier:check
      - *notify-fail-on-slack

  test:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run tests
          command: npm run test --watchAll=false

  publish-to-docker:
    executor: docker-publisher
    steps:
      - checkout
      - *show-current-branch-name
      - setup_remote_docker
      - *restore-cache
      - run: docker login -u "${DOCKER_HUB_USER}" -p "${DOCKER_HUB_PASSWORD}"
      - run: docker build -t ${IMAGE_NAME}:latest .
      - run:
          name: Tag and Publish Docker Image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]
            then 
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:stable-${CIRCLE_BUILD_NUM}
            elif [ "${CIRCLE_BRANCH}" == "staging" ]
            then 
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:staging-${CIRCLE_BUILD_NUM}
            else
              docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM} && docker push ${IMAGE_NAME}:dev-${CIRCLE_BUILD_NUM}
            fi

  terraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Validate and Format
          command: |
            cd deploy/
            terraform init -backend=false

  terraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/deploy/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/deploy/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output cinema_app_bucket_name > ../cinema_bucket_name.txt
            terraform output cloudfront_distribution_id > ../cloudfront_distribution_id.txt
            echo $(cat artifacts/cinema_bucket_name.txt | sed 's/\"//g')
      - *persist-to-workspace

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS S3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/cinema_bucket_name.txt | sed 's/\"//g')
            echo $AWS_BUCKET_NAME
            aws --region ${AWS_REGION} s3 sync ~/repo/build s3://${AWS_BUCKET_NAME} --delete
      - *persist-to-workspace
      - *notify-fail-on-slack

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run:
          name: Deploy to AWS Cloudfront
          command: |
            CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_distribution_id.txt | sed 's/\"//g')
            echo $CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /*
      - *notify-fail-on-slack

  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "Notifying on slack"
      - slack/notify:
          event: always
          channel: 'cinema-app-circleci'
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to AWS S3 and Cloudfront is complete ðŸŽ‰ðŸ¥³",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n${CIRCLE_PROJECT_REPONAME}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n${CIRCLE_BRANCH}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n${CIRCLE_BUILD_NUM}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n${CIRCLE_PROJECT_USERNAME}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  terraform-destroy:
    executor: terraform-executor
    steps:
      - checkout
      - run:
          name: Terraform Destroy
          command: |
            cd deploy/
            terraform init
            terraform workspace select ${CIRCLE_BRANCH}
            terraform destroy --auto-approve

workflows:
  build_and_deploy:
    jobs:
      - add-github-deploy-key:
          steps:
            - add_ssh_keys:
                fingerprints:
                  - '29:35:a0:40:16:0f:c7:10:7b:65:92:dc:6d:82:6b:ab'
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - test:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-validate:
          requires:
            - test
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - publish-to-docker:
          requires:
            - test
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-via-slack:
          requires:
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - hold:
          type: approval
          requires:
            - deploy-to-aws-cloudfront
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - develop
                - staging
                - master
